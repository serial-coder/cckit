// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0
// 	protoc        v3.13.0
// source: cpaper_asservice/service/service.proto

package service

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	schema "github.com/s7techlab/cckit/examples/cpaper_asservice/schema"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

var File_cpaper_asservice_service_service_proto protoreflect.FileDescriptor

var file_cpaper_asservice_service_service_proto_rawDesc = []byte{
	0x0a, 0x26, 0x63, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x63, 0x70, 0x61, 0x70, 0x65, 0x72,
	0x5f, 0x61, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x63,
	0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x32, 0xe7, 0x06, 0x0a, 0x06, 0x43, 0x50, 0x61, 0x70, 0x65, 0x72, 0x12, 0x5d,
	0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2c,
	0x2e, 0x63, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63,
	0x69, 0x61, 0x6c, 0x50, 0x61, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x0f, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x2f, 0x63, 0x70, 0x61, 0x70, 0x65, 0x72, 0x12, 0x84, 0x01,
	0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x2a, 0x2e, 0x63, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x61,
	0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x61, 0x70, 0x65, 0x72, 0x49,
	0x64, 0x1a, 0x28, 0x2e, 0x63, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x61, 0x70, 0x65, 0x72, 0x22, 0x27, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f, 0x63, 0x70, 0x61, 0x70, 0x65, 0x72, 0x2f, 0x7b, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x72, 0x7d, 0x2f, 0x7b, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x7d, 0x12, 0x7c, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x42, 0x79, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x23, 0x2e, 0x63, 0x70, 0x61, 0x70, 0x65, 0x72,
	0x5f, 0x61, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x1a, 0x28, 0x2e, 0x63,
	0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61,
	0x6c, 0x50, 0x61, 0x70, 0x65, 0x72, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12,
	0x2f, 0x63, 0x70, 0x61, 0x70, 0x65, 0x72, 0x2f, 0x65, 0x78, 0x74, 0x69, 0x64, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x12, 0x7a, 0x0a, 0x05, 0x49, 0x73, 0x73, 0x75, 0x65, 0x12, 0x2d, 0x2e, 0x63, 0x70,
	0x61, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x72, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x61, 0x70, 0x65, 0x72, 0x1a, 0x28, 0x2e, 0x63, 0x70, 0x61,
	0x70, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x50,
	0x61, 0x70, 0x65, 0x72, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x22, 0x0d, 0x2f, 0x63,
	0x70, 0x61, 0x70, 0x65, 0x72, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x74,
	0x0a, 0x03, 0x42, 0x75, 0x79, 0x12, 0x2b, 0x2e, 0x63, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x61,
	0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x42, 0x75, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x61, 0x70,
	0x65, 0x72, 0x1a, 0x28, 0x2e, 0x63, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x61, 0x70, 0x65, 0x72, 0x22, 0x16, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x10, 0x22, 0x0b, 0x2f, 0x63, 0x70, 0x61, 0x70, 0x65, 0x72, 0x2f, 0x62, 0x75,
	0x79, 0x3a, 0x01, 0x2a, 0x12, 0x7d, 0x0a, 0x06, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x12, 0x2e,
	0x2e, 0x63, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x61, 0x70, 0x65, 0x72, 0x1a, 0x28,
	0x2e, 0x63, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63,
	0x69, 0x61, 0x6c, 0x50, 0x61, 0x70, 0x65, 0x72, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13,
	0x22, 0x0e, 0x2f, 0x63, 0x70, 0x61, 0x70, 0x65, 0x72, 0x2f, 0x72, 0x65, 0x64, 0x65, 0x65, 0x6d,
	0x3a, 0x01, 0x2a, 0x12, 0x87, 0x01, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x2a,
	0x2e, 0x63, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63,
	0x69, 0x61, 0x6c, 0x50, 0x61, 0x70, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x28, 0x2e, 0x63, 0x70, 0x61,
	0x70, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x50,
	0x61, 0x70, 0x65, 0x72, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x2a, 0x1f, 0x2f, 0x63,
	0x70, 0x61, 0x70, 0x65, 0x72, 0x2f, 0x7b, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x7d, 0x2f, 0x7b,
	0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x7d, 0x42, 0x3e, 0x5a,
	0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x37, 0x74, 0x65,
	0x63, 0x68, 0x6c, 0x61, 0x62, 0x2f, 0x63, 0x63, 0x6b, 0x69, 0x74, 0x2f, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x2f, 0x63, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_cpaper_asservice_service_service_proto_goTypes = []interface{}{
	(*empty.Empty)(nil),                  // 0: google.protobuf.Empty
	(*schema.CommercialPaperId)(nil),     // 1: cpaper_asservice.schema.CommercialPaperId
	(*schema.ExternalId)(nil),            // 2: cpaper_asservice.schema.ExternalId
	(*schema.IssueCommercialPaper)(nil),  // 3: cpaper_asservice.schema.IssueCommercialPaper
	(*schema.BuyCommercialPaper)(nil),    // 4: cpaper_asservice.schema.BuyCommercialPaper
	(*schema.RedeemCommercialPaper)(nil), // 5: cpaper_asservice.schema.RedeemCommercialPaper
	(*schema.CommercialPaperList)(nil),   // 6: cpaper_asservice.schema.CommercialPaperList
	(*schema.CommercialPaper)(nil),       // 7: cpaper_asservice.schema.CommercialPaper
}
var file_cpaper_asservice_service_service_proto_depIdxs = []int32{
	0, // 0: cpaper_asservice.service.CPaper.List:input_type -> google.protobuf.Empty
	1, // 1: cpaper_asservice.service.CPaper.Get:input_type -> cpaper_asservice.schema.CommercialPaperId
	2, // 2: cpaper_asservice.service.CPaper.GetByExternalId:input_type -> cpaper_asservice.schema.ExternalId
	3, // 3: cpaper_asservice.service.CPaper.Issue:input_type -> cpaper_asservice.schema.IssueCommercialPaper
	4, // 4: cpaper_asservice.service.CPaper.Buy:input_type -> cpaper_asservice.schema.BuyCommercialPaper
	5, // 5: cpaper_asservice.service.CPaper.Redeem:input_type -> cpaper_asservice.schema.RedeemCommercialPaper
	1, // 6: cpaper_asservice.service.CPaper.Delete:input_type -> cpaper_asservice.schema.CommercialPaperId
	6, // 7: cpaper_asservice.service.CPaper.List:output_type -> cpaper_asservice.schema.CommercialPaperList
	7, // 8: cpaper_asservice.service.CPaper.Get:output_type -> cpaper_asservice.schema.CommercialPaper
	7, // 9: cpaper_asservice.service.CPaper.GetByExternalId:output_type -> cpaper_asservice.schema.CommercialPaper
	7, // 10: cpaper_asservice.service.CPaper.Issue:output_type -> cpaper_asservice.schema.CommercialPaper
	7, // 11: cpaper_asservice.service.CPaper.Buy:output_type -> cpaper_asservice.schema.CommercialPaper
	7, // 12: cpaper_asservice.service.CPaper.Redeem:output_type -> cpaper_asservice.schema.CommercialPaper
	7, // 13: cpaper_asservice.service.CPaper.Delete:output_type -> cpaper_asservice.schema.CommercialPaper
	7, // [7:14] is the sub-list for method output_type
	0, // [0:7] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_cpaper_asservice_service_service_proto_init() }
func file_cpaper_asservice_service_service_proto_init() {
	if File_cpaper_asservice_service_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cpaper_asservice_service_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cpaper_asservice_service_service_proto_goTypes,
		DependencyIndexes: file_cpaper_asservice_service_service_proto_depIdxs,
	}.Build()
	File_cpaper_asservice_service_service_proto = out.File
	file_cpaper_asservice_service_service_proto_rawDesc = nil
	file_cpaper_asservice_service_service_proto_goTypes = nil
	file_cpaper_asservice_service_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CPaperClient is the client API for CPaper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CPaperClient interface {
	// List method returns all registered commercial papers
	List(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*schema.CommercialPaperList, error)
	// Get method returns commercial paper data by id
	Get(ctx context.Context, in *schema.CommercialPaperId, opts ...grpc.CallOption) (*schema.CommercialPaper, error)
	// GetByExternalId
	GetByExternalId(ctx context.Context, in *schema.ExternalId, opts ...grpc.CallOption) (*schema.CommercialPaper, error)
	// Issue commercial paper
	Issue(ctx context.Context, in *schema.IssueCommercialPaper, opts ...grpc.CallOption) (*schema.CommercialPaper, error)
	// Buy commercial paper
	Buy(ctx context.Context, in *schema.BuyCommercialPaper, opts ...grpc.CallOption) (*schema.CommercialPaper, error)
	// Redeem commercial paper
	Redeem(ctx context.Context, in *schema.RedeemCommercialPaper, opts ...grpc.CallOption) (*schema.CommercialPaper, error)
	// Delete commercial paper
	Delete(ctx context.Context, in *schema.CommercialPaperId, opts ...grpc.CallOption) (*schema.CommercialPaper, error)
}

type cPaperClient struct {
	cc grpc.ClientConnInterface
}

func NewCPaperClient(cc grpc.ClientConnInterface) CPaperClient {
	return &cPaperClient{cc}
}

func (c *cPaperClient) List(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*schema.CommercialPaperList, error) {
	out := new(schema.CommercialPaperList)
	err := c.cc.Invoke(ctx, "/cpaper_asservice.service.CPaper/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cPaperClient) Get(ctx context.Context, in *schema.CommercialPaperId, opts ...grpc.CallOption) (*schema.CommercialPaper, error) {
	out := new(schema.CommercialPaper)
	err := c.cc.Invoke(ctx, "/cpaper_asservice.service.CPaper/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cPaperClient) GetByExternalId(ctx context.Context, in *schema.ExternalId, opts ...grpc.CallOption) (*schema.CommercialPaper, error) {
	out := new(schema.CommercialPaper)
	err := c.cc.Invoke(ctx, "/cpaper_asservice.service.CPaper/GetByExternalId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cPaperClient) Issue(ctx context.Context, in *schema.IssueCommercialPaper, opts ...grpc.CallOption) (*schema.CommercialPaper, error) {
	out := new(schema.CommercialPaper)
	err := c.cc.Invoke(ctx, "/cpaper_asservice.service.CPaper/Issue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cPaperClient) Buy(ctx context.Context, in *schema.BuyCommercialPaper, opts ...grpc.CallOption) (*schema.CommercialPaper, error) {
	out := new(schema.CommercialPaper)
	err := c.cc.Invoke(ctx, "/cpaper_asservice.service.CPaper/Buy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cPaperClient) Redeem(ctx context.Context, in *schema.RedeemCommercialPaper, opts ...grpc.CallOption) (*schema.CommercialPaper, error) {
	out := new(schema.CommercialPaper)
	err := c.cc.Invoke(ctx, "/cpaper_asservice.service.CPaper/Redeem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cPaperClient) Delete(ctx context.Context, in *schema.CommercialPaperId, opts ...grpc.CallOption) (*schema.CommercialPaper, error) {
	out := new(schema.CommercialPaper)
	err := c.cc.Invoke(ctx, "/cpaper_asservice.service.CPaper/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CPaperServer is the server API for CPaper service.
type CPaperServer interface {
	// List method returns all registered commercial papers
	List(context.Context, *empty.Empty) (*schema.CommercialPaperList, error)
	// Get method returns commercial paper data by id
	Get(context.Context, *schema.CommercialPaperId) (*schema.CommercialPaper, error)
	// GetByExternalId
	GetByExternalId(context.Context, *schema.ExternalId) (*schema.CommercialPaper, error)
	// Issue commercial paper
	Issue(context.Context, *schema.IssueCommercialPaper) (*schema.CommercialPaper, error)
	// Buy commercial paper
	Buy(context.Context, *schema.BuyCommercialPaper) (*schema.CommercialPaper, error)
	// Redeem commercial paper
	Redeem(context.Context, *schema.RedeemCommercialPaper) (*schema.CommercialPaper, error)
	// Delete commercial paper
	Delete(context.Context, *schema.CommercialPaperId) (*schema.CommercialPaper, error)
}

// UnimplementedCPaperServer can be embedded to have forward compatible implementations.
type UnimplementedCPaperServer struct {
}

func (*UnimplementedCPaperServer) List(context.Context, *empty.Empty) (*schema.CommercialPaperList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedCPaperServer) Get(context.Context, *schema.CommercialPaperId) (*schema.CommercialPaper, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedCPaperServer) GetByExternalId(context.Context, *schema.ExternalId) (*schema.CommercialPaper, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByExternalId not implemented")
}
func (*UnimplementedCPaperServer) Issue(context.Context, *schema.IssueCommercialPaper) (*schema.CommercialPaper, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Issue not implemented")
}
func (*UnimplementedCPaperServer) Buy(context.Context, *schema.BuyCommercialPaper) (*schema.CommercialPaper, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Buy not implemented")
}
func (*UnimplementedCPaperServer) Redeem(context.Context, *schema.RedeemCommercialPaper) (*schema.CommercialPaper, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Redeem not implemented")
}
func (*UnimplementedCPaperServer) Delete(context.Context, *schema.CommercialPaperId) (*schema.CommercialPaper, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterCPaperServer(s *grpc.Server, srv CPaperServer) {
	s.RegisterService(&_CPaper_serviceDesc, srv)
}

func _CPaper_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CPaperServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpaper_asservice.service.CPaper/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CPaperServer).List(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CPaper_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(schema.CommercialPaperId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CPaperServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpaper_asservice.service.CPaper/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CPaperServer).Get(ctx, req.(*schema.CommercialPaperId))
	}
	return interceptor(ctx, in, info, handler)
}

func _CPaper_GetByExternalId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(schema.ExternalId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CPaperServer).GetByExternalId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpaper_asservice.service.CPaper/GetByExternalId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CPaperServer).GetByExternalId(ctx, req.(*schema.ExternalId))
	}
	return interceptor(ctx, in, info, handler)
}

func _CPaper_Issue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(schema.IssueCommercialPaper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CPaperServer).Issue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpaper_asservice.service.CPaper/Issue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CPaperServer).Issue(ctx, req.(*schema.IssueCommercialPaper))
	}
	return interceptor(ctx, in, info, handler)
}

func _CPaper_Buy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(schema.BuyCommercialPaper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CPaperServer).Buy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpaper_asservice.service.CPaper/Buy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CPaperServer).Buy(ctx, req.(*schema.BuyCommercialPaper))
	}
	return interceptor(ctx, in, info, handler)
}

func _CPaper_Redeem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(schema.RedeemCommercialPaper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CPaperServer).Redeem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpaper_asservice.service.CPaper/Redeem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CPaperServer).Redeem(ctx, req.(*schema.RedeemCommercialPaper))
	}
	return interceptor(ctx, in, info, handler)
}

func _CPaper_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(schema.CommercialPaperId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CPaperServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpaper_asservice.service.CPaper/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CPaperServer).Delete(ctx, req.(*schema.CommercialPaperId))
	}
	return interceptor(ctx, in, info, handler)
}

var _CPaper_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cpaper_asservice.service.CPaper",
	HandlerType: (*CPaperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _CPaper_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _CPaper_Get_Handler,
		},
		{
			MethodName: "GetByExternalId",
			Handler:    _CPaper_GetByExternalId_Handler,
		},
		{
			MethodName: "Issue",
			Handler:    _CPaper_Issue_Handler,
		},
		{
			MethodName: "Buy",
			Handler:    _CPaper_Buy_Handler,
		},
		{
			MethodName: "Redeem",
			Handler:    _CPaper_Redeem_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CPaper_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cpaper_asservice/service/service.proto",
}
