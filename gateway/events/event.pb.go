// Code generated by protoc-gen-go. DO NOT EDIT.
// source: event.proto

package events

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	peer "github.com/hyperledger/fabric/protos/peer"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("event.proto", fileDescriptor_2d17a9d3f0ddf27e) }

var fileDescriptor_2d17a9d3f0ddf27e = []byte{
	// 206 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4e, 0x2d, 0x4b, 0xcd,
	0x2b, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x03, 0x73, 0x8a, 0xa5, 0x64, 0xd2, 0xf3,
	0xf3, 0xd3, 0x73, 0x52, 0xf5, 0x13, 0x0b, 0x32, 0xf5, 0x13, 0xf3, 0xf2, 0xf2, 0x4b, 0x12, 0x4b,
	0x32, 0xf3, 0xf3, 0x8a, 0x21, 0xaa, 0xa4, 0xa4, 0xa1, 0xb2, 0x60, 0x5e, 0x52, 0x69, 0x9a, 0x7e,
	0x6a, 0x6e, 0x41, 0x49, 0x25, 0x54, 0xd2, 0x3e, 0x3d, 0xb3, 0x24, 0xa3, 0x34, 0x49, 0x2f, 0x39,
	0x3f, 0x57, 0x3f, 0xa3, 0xb2, 0x20, 0xb5, 0x28, 0x27, 0x35, 0x25, 0x3d, 0xb5, 0x48, 0x3f, 0x2d,
	0x31, 0xa9, 0x28, 0x33, 0x19, 0xa2, 0xa7, 0x58, 0xbf, 0x20, 0x35, 0xb5, 0x48, 0x3f, 0x39, 0x23,
	0x31, 0x33, 0x2f, 0x39, 0x3f, 0x25, 0x35, 0x1e, 0xc9, 0x0d, 0x46, 0x89, 0x5c, 0x7c, 0xce, 0x30,
	0x09, 0x57, 0x90, 0xb8, 0x90, 0x3f, 0x17, 0x37, 0x98, 0x11, 0x5c, 0x52, 0x94, 0x9a, 0x98, 0x2b,
	0x24, 0xa6, 0x07, 0xb1, 0x5f, 0x0f, 0x66, 0xbf, 0x9e, 0x2b, 0xc8, 0x7e, 0x29, 0x31, 0x88, 0x40,
	0xb1, 0x1e, 0xaa, 0x76, 0x25, 0xbe, 0xa6, 0xcb, 0x4f, 0x26, 0x33, 0x71, 0x08, 0xb1, 0xe9, 0x83,
	0xad, 0x31, 0x60, 0x74, 0xe2, 0x8a, 0xe2, 0xd0, 0xb3, 0x86, 0x78, 0x35, 0x89, 0x0d, 0xac, 0xc9,
	0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x0f, 0x64, 0xa3, 0xd0, 0x08, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ChaincodeEventClient is the client API for ChaincodeEvent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChaincodeEventClient interface {
	EventStream(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (ChaincodeEvent_EventStreamClient, error)
}

type chaincodeEventClient struct {
	cc *grpc.ClientConn
}

func NewChaincodeEventClient(cc *grpc.ClientConn) ChaincodeEventClient {
	return &chaincodeEventClient{cc}
}

func (c *chaincodeEventClient) EventStream(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (ChaincodeEvent_EventStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ChaincodeEvent_serviceDesc.Streams[0], "/events.ChaincodeEvent/EventStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &chaincodeEventEventStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChaincodeEvent_EventStreamClient interface {
	Recv() (*peer.ChaincodeEvent, error)
	grpc.ClientStream
}

type chaincodeEventEventStreamClient struct {
	grpc.ClientStream
}

func (x *chaincodeEventEventStreamClient) Recv() (*peer.ChaincodeEvent, error) {
	m := new(peer.ChaincodeEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChaincodeEventServer is the server API for ChaincodeEvent service.
type ChaincodeEventServer interface {
	EventStream(*empty.Empty, ChaincodeEvent_EventStreamServer) error
}

func RegisterChaincodeEventServer(s *grpc.Server, srv ChaincodeEventServer) {
	s.RegisterService(&_ChaincodeEvent_serviceDesc, srv)
}

func _ChaincodeEvent_EventStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChaincodeEventServer).EventStream(m, &chaincodeEventEventStreamServer{stream})
}

type ChaincodeEvent_EventStreamServer interface {
	Send(*peer.ChaincodeEvent) error
	grpc.ServerStream
}

type chaincodeEventEventStreamServer struct {
	grpc.ServerStream
}

func (x *chaincodeEventEventStreamServer) Send(m *peer.ChaincodeEvent) error {
	return x.ServerStream.SendMsg(m)
}

var _ChaincodeEvent_serviceDesc = grpc.ServiceDesc{
	ServiceName: "events.ChaincodeEvent",
	HandlerType: (*ChaincodeEventServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EventStream",
			Handler:       _ChaincodeEvent_EventStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "event.proto",
}
